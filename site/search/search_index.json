{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"administering-linux/","text":"Administering Linux ToDo Section Rotating Log Files Running Jobs Via Cron Creating systemd services Esoteric Unix Skills: At your leisure, do a deep dive into some of these subjects. Make sure to include regular expressions. Mastering Regular Expressions Sed & Awk DNS and BIND","title":"Administering Linux"},{"location":"administering-linux/#administering-linux","text":"","title":"Administering Linux"},{"location":"administering-linux/#todo-section","text":"Rotating Log Files Running Jobs Via Cron Creating systemd services Esoteric Unix Skills: At your leisure, do a deep dive into some of these subjects. Make sure to include regular expressions. Mastering Regular Expressions Sed & Awk DNS and BIND","title":"ToDo Section"},{"location":"basic-networking/","text":"Basic Networking Introduction Originally there were local networks, which were called networks because all networks were local. This would connect, for instance, the mainframe in the Physics Dept. with the mainframe in the Mathematics Dept. both on the same campus. But then they wanted to connect computers that were farther away than that ... they wanted to do something crazy like connect the mainframes at Cal Tech and MIT! Well, the US Military had a desire for a communications method that could survive a nuclear war, so they paid for ARPANET to be developed. ARPANET, which connected a few goverment installations and major universities, is what eventually became the Internet. Because the Internet originated on college campuses, there was a broad spirit of trust and responsibility. Nobody would do something illegal or unauthorized on a computer -- they could get kicked out of school! Then the Internet became world-wide, and popular, and you didn't have to be on a college campus to use it, and suddenly that open posture didn't seem like such a good idea anymore. This is why network security is kind of a \"bolted-on\" affair rather than integrated at a deeper level. It wasn't designed to be secure. Chapter 4 of Think Unix","title":"Basic Networking"},{"location":"basic-networking/#basic-networking","text":"","title":"Basic Networking"},{"location":"basic-networking/#introduction","text":"Originally there were local networks, which were called networks because all networks were local. This would connect, for instance, the mainframe in the Physics Dept. with the mainframe in the Mathematics Dept. both on the same campus. But then they wanted to connect computers that were farther away than that ... they wanted to do something crazy like connect the mainframes at Cal Tech and MIT! Well, the US Military had a desire for a communications method that could survive a nuclear war, so they paid for ARPANET to be developed. ARPANET, which connected a few goverment installations and major universities, is what eventually became the Internet. Because the Internet originated on college campuses, there was a broad spirit of trust and responsibility. Nobody would do something illegal or unauthorized on a computer -- they could get kicked out of school! Then the Internet became world-wide, and popular, and you didn't have to be on a college campus to use it, and suddenly that open posture didn't seem like such a good idea anymore. This is why network security is kind of a \"bolted-on\" affair rather than integrated at a deeper level. It wasn't designed to be secure.","title":"Introduction"},{"location":"basic-networking/#chapter-4-of-think-unix","text":"","title":"Chapter 4 of Think Unix"},{"location":"flask-site/","text":"","title":"Flask site"},{"location":"getting-started/","text":"Getting Started Make sure you have all the pre-requisite knowlege discussed in the previous chapter, and that you've installed all the necessary tools and signed into all the websites you'll need. You should be able open iTerm2 and see the command-line before you in all its inscrutable glory. Now we'll need to install the HomeBrew package manager. Follow the instructions on the HomeBrew page : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Then you'll need into install Python with: brew install python3 Then we'll start learning how to use Linux !","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Make sure you have all the pre-requisite knowlege discussed in the previous chapter, and that you've installed all the necessary tools and signed into all the websites you'll need. You should be able open iTerm2 and see the command-line before you in all its inscrutable glory. Now we'll need to install the HomeBrew package manager. Follow the instructions on the HomeBrew page : /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" Then you'll need into install Python with: brew install python3 Then we'll start learning how to use Linux !","title":"Getting Started"},{"location":"intro-python/","text":"Python: Learn Python 3 the Hard Way","title":"Intro python"},{"location":"introduction/","text":"Introduction What is a Complete Geek? What is a Complete Geek? It's someone who can get a high-paying job in the tech industry, manage their money wisely, invest for the future, retire when they want to, and live a good life. This document describes a few paths. There are many more. And you don't have to complete a path to be successful and happy. (No person involved in creating this has completed every path here to its conclusion.) This is for people who want to guide their own journey. The Command Line Labs team will provide as much support as we can, but this is ultimately a self-directed journey for self-motivated people. It is not for everyone. Philosophy A Complete Geek is a professional. A crafts-person. A skilled worker. We do good work, we take pride in our work, we deal respectfully and ethically with our coworkers, and perform our jobs with high ethical standards and competence. Requirements Who is this for? You need a basic knowledge of computers. You should be able to browse to specific websites, use Google, use email, etc. You should be competent in written and spoken English. You must be willing to work your ass off, though you can do it at your own pace. You must be persistent and tolerate frustration. Like most fields, being smart as hell helps, but it's not required. What's required is that you keep trying even when you keep failing. Because trying stuff that doesn't work until you finally find a way that does work describes a big chunk of the day-to-day of a working geek. Pre-requisites Basic competence in Microsoft Word, PowerPoint, and Excel Markdown basics Typing (touch typing, two-finger typing, nose typing, or whatever) with competence and a reasonable rate of speed. Basic competence with Mac OS. Requirements (What do you need?) At this time, there's a non-zero amount of money you'll need to spend to participate in this program. While we'd like to get that down to zero, at a bare minimum you're going to need a laptop and some software. A Mac laptop or desktop -- doesn't have to be a super-recent one. We'll work to include instructions for Windows computers in the future, but we're not there yet. (If you already have a Linux laptop, you're maybe not the target for this book.) Code Editor: We'll start with Visual Studio Code . It's very good, and it's free. Use it unless you can articulate a reason to use something else. You'll need a credit-card and the ability to pay $5 a month to DigitalOcean.com or Linode.com. This gets you a virtual Linux server that will be essential for testing your work. You'll need a 1Password.com account. This is about $35 a year. This will be used to securely store your passwords. You'll need a GitHub.com account. (Free.) You'll need to install iTerm2 . It's a replacement for the built-in Terminal program that comes with the Mac. You can get the job done with the built-in terminal, but iTerm2 is just better. It's free too! You'll need to buy a domain. We don't have a recommended vendor at this time -- namecheap.com is easy, while others prefer AWS Route53. They'll all be around $10 a year for a .com domain. (You can get any root domain; doesn't have to be .com.) The reason for this is that you'll need this to build a website. We recommend building a professional portfolio site to use for your email address and to help you get a job. We'll cover all that later. For now, get a professional domain. Could be firstnamelastname.com if available, or something similar. Don't get rocketdude420.com or anything like that, at least for your professional website. In addition, there will be a number of books you'll need to purchase throughout this program. When possible we'll use free or cheap resources, but there's no substitute, for instance, for Jeffrey Friedl's Regex book .","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#what-is-a-complete-geek","text":"What is a Complete Geek? It's someone who can get a high-paying job in the tech industry, manage their money wisely, invest for the future, retire when they want to, and live a good life. This document describes a few paths. There are many more. And you don't have to complete a path to be successful and happy. (No person involved in creating this has completed every path here to its conclusion.) This is for people who want to guide their own journey. The Command Line Labs team will provide as much support as we can, but this is ultimately a self-directed journey for self-motivated people. It is not for everyone.","title":"What is a Complete Geek?"},{"location":"introduction/#philosophy","text":"A Complete Geek is a professional. A crafts-person. A skilled worker. We do good work, we take pride in our work, we deal respectfully and ethically with our coworkers, and perform our jobs with high ethical standards and competence.","title":"Philosophy"},{"location":"introduction/#requirements","text":"","title":"Requirements"},{"location":"introduction/#who-is-this-for","text":"You need a basic knowledge of computers. You should be able to browse to specific websites, use Google, use email, etc. You should be competent in written and spoken English. You must be willing to work your ass off, though you can do it at your own pace. You must be persistent and tolerate frustration. Like most fields, being smart as hell helps, but it's not required. What's required is that you keep trying even when you keep failing. Because trying stuff that doesn't work until you finally find a way that does work describes a big chunk of the day-to-day of a working geek.","title":"Who is this for?"},{"location":"introduction/#pre-requisites","text":"Basic competence in Microsoft Word, PowerPoint, and Excel Markdown basics Typing (touch typing, two-finger typing, nose typing, or whatever) with competence and a reasonable rate of speed. Basic competence with Mac OS.","title":"Pre-requisites"},{"location":"introduction/#requirements-what-do-you-need","text":"At this time, there's a non-zero amount of money you'll need to spend to participate in this program. While we'd like to get that down to zero, at a bare minimum you're going to need a laptop and some software. A Mac laptop or desktop -- doesn't have to be a super-recent one. We'll work to include instructions for Windows computers in the future, but we're not there yet. (If you already have a Linux laptop, you're maybe not the target for this book.) Code Editor: We'll start with Visual Studio Code . It's very good, and it's free. Use it unless you can articulate a reason to use something else. You'll need a credit-card and the ability to pay $5 a month to DigitalOcean.com or Linode.com. This gets you a virtual Linux server that will be essential for testing your work. You'll need a 1Password.com account. This is about $35 a year. This will be used to securely store your passwords. You'll need a GitHub.com account. (Free.) You'll need to install iTerm2 . It's a replacement for the built-in Terminal program that comes with the Mac. You can get the job done with the built-in terminal, but iTerm2 is just better. It's free too! You'll need to buy a domain. We don't have a recommended vendor at this time -- namecheap.com is easy, while others prefer AWS Route53. They'll all be around $10 a year for a .com domain. (You can get any root domain; doesn't have to be .com.) The reason for this is that you'll need this to build a website. We recommend building a professional portfolio site to use for your email address and to help you get a job. We'll cover all that later. For now, get a professional domain. Could be firstnamelastname.com if available, or something similar. Don't get rocketdude420.com or anything like that, at least for your professional website. In addition, there will be a number of books you'll need to purchase throughout this program. When possible we'll use free or cheap resources, but there's no substitute, for instance, for Jeffrey Friedl's Regex book .","title":"Requirements (What do you need?)"},{"location":"static-site/","text":"","title":"Static site"},{"location":"understanding-linux/","text":"Understanding Linux SystemD and how it works","title":"Understanding Linux"},{"location":"understanding-linux/#understanding-linux","text":"SystemD and how it works","title":"Understanding Linux"},{"location":"using-linux/","text":"Using Linux The text we'll be using for this chapter is Think UNIX by Jon Lasser. It's a classic, but still relevant for reasons we'll discuss shortly. The problem with becoming a professional in the Microsoft Windows evironment is that 50% of your knowledge and skills will become obsolete within five years. And it's incredibly difficult to predict in advance which 50% will be obsolete. With Linux, in contrast, it's quite easy to tell what parts of technology will stick around for a while and what won't. Docker and Kubernetes will probably be obsolete or at least vastly changed by the end of your career. Grep, awk, regular expressions, and sed (a vastly incomplete list) will still be largely unchanged in 30 years, and will still be wildly useful. So the fact that this book is two decades old isn't a problem. The stuff it talks about is still totally valid. Introduction Read all the introduction. Chapter 1, Documentation Read the entire chapter and do all the exercises. Chapter 2, Files and Processes Read the entire chapter and do all the exercises. Chapter 3, Redirection and Pipes Read the entire chapter and do all the exercises. Chapter 4, Networking Hold off on Chapter 4 now. We'll do it in the Basic Networking chapter. Chapter 5, vi, Dotfiles, and Regular Expressions Read the entire chapter and do all the exercises. + Chapter 6, Muddling Through Shells Read the entire chapter and do all the exercises. Chapter 7, Variables and Quoting Read the entire chapter and do all the exercises. Chapter 8, Conditional Execution and Loops Read the entire chapter and do all the exercises. Chapter 9, Shell Scripts and More Read the entire chapter and do all the exercises. Chapter 10 and Chapter 11 Skip. X Windows is the technology used to put up pretty pictures on a Linux screen, instead of just text. X Windows is still relevant to those who run Linux desktops or laptops. However, we're focusing on Linux in a server environment here, and X Windows is not relevant for that.","title":"Using Linux"},{"location":"using-linux/#using-linux","text":"The text we'll be using for this chapter is Think UNIX by Jon Lasser. It's a classic, but still relevant for reasons we'll discuss shortly. The problem with becoming a professional in the Microsoft Windows evironment is that 50% of your knowledge and skills will become obsolete within five years. And it's incredibly difficult to predict in advance which 50% will be obsolete. With Linux, in contrast, it's quite easy to tell what parts of technology will stick around for a while and what won't. Docker and Kubernetes will probably be obsolete or at least vastly changed by the end of your career. Grep, awk, regular expressions, and sed (a vastly incomplete list) will still be largely unchanged in 30 years, and will still be wildly useful. So the fact that this book is two decades old isn't a problem. The stuff it talks about is still totally valid.","title":"Using Linux"},{"location":"using-linux/#introduction","text":"Read all the introduction.","title":"Introduction"},{"location":"using-linux/#chapter-1-documentation","text":"Read the entire chapter and do all the exercises.","title":"Chapter 1, Documentation"},{"location":"using-linux/#chapter-2-files-and-processes","text":"Read the entire chapter and do all the exercises.","title":"Chapter 2, Files and Processes"},{"location":"using-linux/#chapter-3-redirection-and-pipes","text":"Read the entire chapter and do all the exercises.","title":"Chapter 3, Redirection and Pipes"},{"location":"using-linux/#chapter-4-networking","text":"Hold off on Chapter 4 now. We'll do it in the Basic Networking chapter.","title":"Chapter 4, Networking"},{"location":"using-linux/#chapter-5-vi-dotfiles-and-regular-expressions","text":"Read the entire chapter and do all the exercises. +","title":"Chapter 5, vi, Dotfiles, and Regular Expressions"},{"location":"using-linux/#chapter-6-muddling-through-shells","text":"Read the entire chapter and do all the exercises.","title":"Chapter 6, Muddling Through Shells"},{"location":"using-linux/#chapter-7-variables-and-quoting","text":"Read the entire chapter and do all the exercises.","title":"Chapter 7, Variables and Quoting"},{"location":"using-linux/#chapter-8-conditional-execution-and-loops","text":"Read the entire chapter and do all the exercises.","title":"Chapter 8, Conditional Execution and Loops"},{"location":"using-linux/#chapter-9-shell-scripts-and-more","text":"Read the entire chapter and do all the exercises.","title":"Chapter 9, Shell Scripts and More"},{"location":"using-linux/#chapter-10-and-chapter-11","text":"Skip. X Windows is the technology used to put up pretty pictures on a Linux screen, instead of just text. X Windows is still relevant to those who run Linux desktops or laptops. However, we're focusing on Linux in a server environment here, and X Windows is not relevant for that.","title":"Chapter 10 and Chapter 11"}]}